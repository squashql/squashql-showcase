(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[625],{5011:function(n,e,t){Promise.resolve().then(t.bind(t,344))},344:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return l}});var i=t(3827),c=t(422),s=t(4090),o=t(4232);async function a(){let n=c.sq(),e=await c.Dn(n),t=URL.createObjectURL(new Blob(['importScripts("'.concat(e.mainWorker,'");')],{type:"text/javascript"})),i=new Worker(t),s=new c.kw,o=new c.ak(s,i);await o.instantiate(e.mainModule,e.pthreadWorker);let a=await o.connect();return await a.query("\n              -- Create Continents Table\n            CREATE TABLE continents (\n                continent_id INT PRIMARY KEY,\n                continent VARCHAR(50)\n            );\n\n            -- Insert data into Continents Table\n            INSERT INTO continents (continent_id, continent) VALUES\n            (2, 'Europe'),\n            (3, 'Asia'),\n            (5, 'Africa');\n\n            -- Create Countries Table\n            CREATE TABLE countries (\n                country_id INT PRIMARY KEY,\n                country VARCHAR(50),\n                continent_id INT\n            );\n\n            -- Insert data into Countries Table\n            INSERT INTO countries (country_id, country, continent_id) VALUES\n            (101, 'USA', 1),\n            (102, 'Canada', 1),\n            (103, 'Germany', 2),\n            (104, 'France', 2),\n            (105, 'China', 3),\n            (106, 'India', 3),\n            (107, 'Brazil', 4),\n            (108, 'Argentina', 4),\n            (109, 'Nigeria', 5),\n            (110, 'South Africa', 5);\n\n            -- Create Cities Table\n            CREATE TABLE cities (\n                city_id INT PRIMARY KEY,\n                city VARCHAR(50),\n                country_id INT,\n                sales_amount DECIMAL(10, 2)\n            );\n\n            -- Insert data into Cities Table\n            INSERT INTO cities (city_id, city, country_id, sales_amount) VALUES\n            (1001, 'New York', 101, 15000.00),\n            (1002, 'Los Angeles', 101, 12000.50),\n            (1003, 'Toronto', 102, 10000.75),\n            (1004, 'Berlin', 103, 8000.25),\n            (1005, 'Paris', 104, 9500.50),\n            (1006, 'Beijing', 105, 12000.00),\n            (1007, 'Mumbai', 106, 11000.75),\n            (1008, 'Sao Paulo', 107, 13000.25),\n            (1009, 'Buenos Aires', 108, 11500.50),\n            (1010, 'Lagos', 109, 9000.00),\n            (1011, 'Johannesburg', 110, 8500.75),\n            (1012, 'Chicago', 101, 12500.00),\n            (1013, 'Hamburg', 103, 8500.50),\n            (1014, 'Shanghai', 105, 11000.25),\n            (1015, 'Delhi', 106, 10500.75),\n            (1016, 'Rio de Janeiro', 107, 12000.00),\n            (1017, 'Cape Town', 110, 9500.50),\n            (1018, 'Toronto', 102, 9800.25),\n            (1019, 'Munich', 103, 8800.50),\n            (1020, 'Lyon', 104, 9200.25);\n  "),a}async function r(n,e){let t=["continent","country","city"];e.forEach(n=>(function(n,e){let t=n.indexOf(e);return t>-1&&n.splice(t,1),n})(t,n));let i=e.length>0?"ROLLUP("+e.join(", ")+")":"",c="".concat(t.join(", ")).concat(t.length>0?", ":" ").concat(i),s="\n    SELECT ".concat("continent, country, city",", sum(sales_amount) as sales\n    FROM cities\n           INNER JOIN countries on cities.country_id = countries.country_id\n           INNER JOIN continents on continents.continent_id = countries.continent_id\n    GROUP BY ").concat(c,"\n    ORDER BY ALL NULLS FIRST\n  ");console.log(s);let o=[];o.push("(continent, country, city)");let a=[];for(let n=e.length-1;n>=0;n--){a.push(e[n]);let t=["continent","country","city"];t=t.filter(function(n){return!a.includes(n)}),o.push("("+t.join(", ")+")")}return[(await n.query(s)).toString(),c.trim(),"GROUPING SETS ("+o.join(", ")+")"]}function l(){let[n,e]=(0,s.useState)(void 0),[c,l]=(0,s.useState)(void 0),[u,d]=(0,s.useState)("rollup"),[h,y]=(0,s.useState)("gs"),[m,N]=(0,s.useState)({continent:!0,country:!0,city:!0});function f(e){n&&r(n,function(n){let e=[];return Object.entries(n).forEach(n=>{let[t,i]=n;i&&e.push(t)}),e}(e)).then(n=>{let e=JSON.parse(n[0]);e.forEach(n=>Object.keys(n).forEach(e=>{null==n[e]&&delete n[e]})),l({cells:e,rows:["continent","country","city"],columns:[],values:["sales"],hiddenTotals:[]}),d(n[1]),y(n[2])})}function j(n){return(0,i.jsxs)("div",{className:"col py-1",children:[(0,i.jsx)("input",{className:"form-check-input",type:"checkbox",value:"",id:"flexCheckChecked",checked:m[n],onChange:()=>(function(n){let e={...m};switch(n){case"continent":e.continent=!e.continent,N(e);break;case"country":e.country=!e.country,N(e);break;case"city":e.city=!e.city,N(e)}f(e)})(n)}),(0,i.jsx)("label",{className:"form-check-label px-1",htmlFor:"flexCheckChecked",children:n})]})}(0,s.useEffect)(()=>(a().then(n=>e(n)),()=>{null==n||n.close()}),[]);let b=(0,o.default)(()=>Promise.all([t.e(470),t.e(835),t.e(726),t.e(987)]).then(t.bind(t,3987)),{loadableGenerated:{webpack:()=>[3987]},ssr:!1});return n?void 0!==c?(0,i.jsxs)("div",{className:"container",children:[(0,i.jsx)("div",{className:"row",children:(0,i.jsxs)("div",{className:"col",children:[(0,i.jsxs)("p",{className:"lead",children:[(0,i.jsx)("a",{href:"https://github.com/squashql/squashql-showcase",children:(0,i.jsx)("i",{className:"bi bi-github"})})," (Partial) rollup to grouping sets and vice versa"]}),(0,i.jsxs)("p",{style:{fontWeight:300},children:["Powered by: ",(0,i.jsx)("a",{href:"https://nextjs.org/",children:"nextjs"}),", ",(0,i.jsx)("a",{href:"https://duckdb.org/docs/api/wasm/overview.html",children:"DuckDB Wasm"})]})]})}),(0,i.jsxs)("div",{className:"row row-cols-auto mb-3",children:[(0,i.jsx)("div",{className:"col",children:(0,i.jsx)("button",{className:"btn btn-dark btn-sm",onClick:()=>f(m),children:"Execute"})}),(0,i.jsx)("div",{className:"col py-1",children:"Rollup on:"}),j("continent"),j("country"),j("city")]}),(0,i.jsxs)("div",{className:"row row-cols-auto",children:[(0,i.jsx)("div",{className:"col",children:(0,i.jsx)(b,{dataCfg:{data:c.cells,fields:{columns:["continent","country","city","sales"]}},options:{width:400,height:window.innerHeight}})}),(0,i.jsxs)("div",{className:"col",children:[(0,i.jsx)("div",{className:"row",children:(0,i.jsxs)("mark",{children:["GROUP BY ",u]})}),(0,i.jsx)("div",{className:"row",children:(0,i.jsx)("small",{children:"is equivalent to"})}),(0,i.jsx)("div",{className:"row",children:(0,i.jsxs)("mark",{children:["GROUP BY ",h]})})]})]})]}):void f(m):(0,i.jsx)("div",{children:"Creating the database..."})}}},function(n){n.O(0,[308,971,69,744],function(){return n(n.s=5011)}),_N_E=n.O()}]);